//
//  basevec.cpp
//  InvadePercolation
//  Base vectors for dense packings
//
//  Created by Yi Hu on 12/22/20.
//

#include "leathsitenode.hpp"

extern const int SIZE_DENSE_BASE;

#if 6==DIM
const int SIZE_DENSE_BASE = 36;
extern const Coordinate<8, IdxType> DENSE_BASE[];
// dense packing base vectors in 6D (E6)
const Coordinate<8, IdxType> DENSE_BASE[SIZE_DENSE_BASE] = {
  { 1, 1, 1, 1, -1, -1, -1, -1},
  { 1, 1, 1, -1, 1, -1, -1, -1},
  { 1, 1, 1, -1, -1, 1, -1, -1},
  { 1, 1, 1, -1, -1, -1, 1, -1},
  { 1, 1, -1, 1, 1, -1, -1, -1},
  { 1, 1, -1, 1, -1, 1, -1, -1},
  { 1, 1, -1, 1, -1, -1, 1, -1},
  { 1, 1, -1, -1, 1, 1, -1, -1},
  { 1, 1, -1, -1, 1, -1, 1, -1},
  { 1, 1, -1, -1, -1, 1, 1, -1},
  { 1, -1, 1, 1, 1, -1, -1, -1},
  { 1, -1, 1, 1, -1, 1, -1, -1},
  { 1, -1, 1, 1, -1, -1, 1, -1},
  { 1, -1, 1, -1, 1, 1, -1, -1},
  { 1, -1, 1, -1, 1, -1, 1, -1},
  { 1, -1, 1, -1, -1, 1, 1, -1},
  { 1, -1, -1, 1, 1, 1, -1, -1},
  { 1, -1, -1, 1, 1, -1, 1, -1},
  { 1, -1, -1, 1, -1, 1, 1, -1},
  { 1, -1, -1, -1, 1, 1, 1, -1},
  { 2, 0, 0, 0, 0, 0, 0, -2},
  { 0, 2, -2, 0, 0, 0, 0, 0},
  { 0, 2, 0, -2, 0, 0, 0, 0},
  { 0, 2, 0, 0, -2, 0, 0, 0},
  { 0, 2, 0, 0, 0, -2, 0, 0},
  { 0, 2, 0, 0, 0, 0, -2, 0},
  { 0, 0, 2, -2, 0, 0, 0, 0},
  { 0, 0, 2, 0, -2, 0, 0, 0},
  { 0, 0, 2, 0, 0, -2, 0, 0},
  { 0, 0, 2, 0, 0, 0, -2, 0},
  { 0, 0, 0, 2, -2, 0, 0, 0},
  { 0, 0, 0, 2, 0, -2, 0, 0},
  { 0, 0, 0, 2, 0, 0, -2, 0},
  { 0, 0, 0, 0, 2, -2, 0, 0},
  { 0, 0, 0, 0, 2, 0, -2, 0},
  { 0, 0, 0, 0, 0, 2, -2, 0}
};
#elif 7==DIM
const int SIZE_DENSE_BASE = 63;
extern const Coordinate<8, IdxType> DENSE_BASE[];
// dense packing base vectors in 7D (E7)
const Coordinate<8, IdxType> DENSE_BASE[SIZE_DENSE_BASE] = {
  { 1, 1, 1, 1, -1, -1, -1, -1},
  { 1, 1, 1, -1, 1, -1, -1, -1},
  { 1, 1, 1, -1, -1, 1, -1, -1},
  { 1, 1, 1, -1, -1, -1, 1, -1},
  { 1, 1, 1, -1, -1, -1, -1, 1},
  { 1, 1, -1, 1, 1, -1, -1, -1},
  { 1, 1, -1, 1, -1, 1, -1, -1},
  { 1, 1, -1, 1, -1, -1, 1, -1},
  { 1, 1, -1, 1, -1, -1, -1, 1},
  { 1, 1, -1, -1, 1, 1, -1, -1},
  { 1, 1, -1, -1, 1, -1, 1, -1},
  { 1, 1, -1, -1, 1, -1, -1, 1},
  { 1, 1, -1, -1, -1, 1, 1, -1},
  { 1, 1, -1, -1, -1, 1, -1, 1},
  { 1, 1, -1, -1, -1, -1, 1, 1},
  { 1, -1, 1, 1, 1, -1, -1, -1},
  { 1, -1, 1, 1, -1, 1, -1, -1},
  { 1, -1, 1, 1, -1, -1, 1, -1},
  { 1, -1, 1, 1, -1, -1, -1, 1},
  { 1, -1, 1, -1, 1, 1, -1, -1},
  { 1, -1, 1, -1, 1, -1, 1, -1},
  { 1, -1, 1, -1, 1, -1, -1, 1},
  { 1, -1, 1, -1, -1, 1, 1, -1},
  { 1, -1, 1, -1, -1, 1, -1, 1},
  { 1, -1, 1, -1, -1, -1, 1, 1},
  { 1, -1, -1, 1, 1, 1, -1, -1},
  { 1, -1, -1, 1, 1, -1, 1, -1},
  { 1, -1, -1, 1, 1, -1, -1, 1},
  { 1, -1, -1, 1, -1, 1, 1, -1},
  { 1, -1, -1, 1, -1, 1, -1, 1},
  { 1, -1, -1, 1, -1, -1, 1, 1},
  { 1, -1, -1, -1, 1, 1, 1, -1},
  { 1, -1, -1, -1, 1, 1, -1, 1},
  { 1, -1, -1, -1, 1, -1, 1, 1},
  { 1, -1, -1, -1, -1, 1, 1, 1},
  { 2, -2, 0, 0, 0, 0, 0, 0},
  { 2, 0, -2, 0, 0, 0, 0, 0},
  { 2, 0, 0, -2, 0, 0, 0, 0},
  { 2, 0, 0, 0, -2, 0, 0, 0},
  { 2, 0, 0, 0, 0, -2, 0, 0},
  { 2, 0, 0, 0, 0, 0, -2, 0},
  { 2, 0, 0, 0, 0, 0, 0, -2},
  { 0, 2, -2, 0, 0, 0, 0, 0},
  { 0, 2, 0, -2, 0, 0, 0, 0},
  { 0, 2, 0, 0, -2, 0, 0, 0},
  { 0, 2, 0, 0, 0, -2, 0, 0},
  { 0, 2, 0, 0, 0, 0, -2, 0},
  { 0, 2, 0, 0, 0, 0, 0, -2},
  { 0, 0, 2, -2, 0, 0, 0, 0},
  { 0, 0, 2, 0, -2, 0, 0, 0},
  { 0, 0, 2, 0, 0, -2, 0, 0},
  { 0, 0, 2, 0, 0, 0, -2, 0},
  { 0, 0, 2, 0, 0, 0, 0, -2},
  { 0, 0, 0, 2, -2, 0, 0, 0},
  { 0, 0, 0, 2, 0, -2, 0, 0},
  { 0, 0, 0, 2, 0, 0, -2, 0},
  { 0, 0, 0, 2, 0, 0, 0, -2},
  { 0, 0, 0, 0, 2, -2, 0, 0},
  { 0, 0, 0, 0, 2, 0, -2, 0},
  { 0, 0, 0, 0, 2, 0, 0, -2},
  { 0, 0, 0, 0, 0, 2, -2, 0},
  { 0, 0, 0, 0, 0, 2, 0, -2},
  { 0, 0, 0, 0, 0, 0, 2, -2}
};
#elif 8==DIM
const int SIZE_DENSE_BASE = 120;
extern const Coordinate<8, IdxType> DENSE_BASE[];
// dense packing base vectors in 8D (E8)
const Coordinate<8, IdxType> DENSE_BASE[SIZE_DENSE_BASE] = {
  { 1, 1, 1, 1, 1, 1, 1, 1},
  { 1, 1, 1, 1, -1, -1, -1, -1},
  { 1, 1, 1, -1, 1, -1, -1, -1},
  { 1, 1, 1, -1, -1, 1, -1, -1},
  { 1, 1, 1, -1, -1, -1, 1, -1},
  { 1, 1, 1, -1, -1, -1, -1, 1},
  { 1, 1, -1, 1, 1, -1, -1, -1},
  { 1, 1, -1, 1, -1, 1, -1, -1},
  { 1, 1, -1, 1, -1, -1, 1, -1},
  { 1, 1, -1, 1, -1, -1, -1, 1},
  { 1, 1, -1, -1, 1, 1, -1, -1},
  { 1, 1, -1, -1, 1, -1, 1, -1},
  { 1, 1, -1, -1, 1, -1, -1, 1},
  { 1, 1, -1, -1, -1, 1, 1, -1},
  { 1, 1, -1, -1, -1, 1, -1, 1},
  { 1, 1, -1, -1, -1, -1, 1, 1},
  { 1, -1, 1, 1, 1, -1, -1, -1},
  { 1, -1, 1, 1, -1, 1, -1, -1},
  { 1, -1, 1, 1, -1, -1, 1, -1},
  { 1, -1, 1, 1, -1, -1, -1, 1},
  { 1, -1, 1, -1, 1, 1, -1, -1},
  { 1, -1, 1, -1, 1, -1, 1, -1},
  { 1, -1, 1, -1, 1, -1, -1, 1},
  { 1, -1, 1, -1, -1, 1, 1, -1},
  { 1, -1, 1, -1, -1, 1, -1, 1},
  { 1, -1, 1, -1, -1, -1, 1, 1},
  { 1, -1, -1, 1, 1, 1, -1, -1},
  { 1, -1, -1, 1, 1, -1, 1, -1},
  { 1, -1, -1, 1, 1, -1, -1, 1},
  { 1, -1, -1, 1, -1, 1, 1, -1},
  { 1, -1, -1, 1, -1, 1, -1, 1},
  { 1, -1, -1, 1, -1, -1, 1, 1},
  { 1, -1, -1, -1, 1, 1, 1, -1},
  { 1, -1, -1, -1, 1, 1, -1, 1},
  { 1, -1, -1, -1, 1, -1, 1, 1},
  { 1, -1, -1, -1, -1, 1, 1, 1},
  { 1, 1, -1, -1, -1, -1, -1, -1},
  { 1, -1, 1, -1, -1, -1, -1, -1},
  { 1, -1, -1, 1, -1, -1, -1, -1},
  { 1, -1, -1, -1, 1, -1, -1, -1},
  { 1, -1, -1, -1, -1, 1, -1, -1},
  { 1, -1, -1, -1, -1, -1, 1, -1},
  { 1, -1, -1, -1, -1, -1, -1, 1},
  { 1, -1, -1, 1, 1, 1, 1, 1},
  { 1, -1, 1, -1, 1, 1, 1, 1},
  { 1, -1, 1, 1, -1, 1, 1, 1},
  { 1, -1, 1, 1, 1, -1, 1, 1},
  { 1, -1, 1, 1, 1, 1, -1, 1},
  { 1, -1, 1, 1, 1, 1, 1, -1},
  { 1, 1, -1, -1, 1, 1, 1, 1},
  { 1, 1, -1, 1, -1, 1, 1, 1},
  { 1, 1, -1, 1, 1, -1, 1, 1},
  { 1, 1, -1, 1, 1, 1, -1, 1},
  { 1, 1, -1, 1, 1, 1, 1, -1},
  { 1, 1, 1, -1, -1, 1, 1, 1},
  { 1, 1, 1, -1, 1, -1, 1, 1},
  { 1, 1, 1, -1, 1, 1, -1, 1},
  { 1, 1, 1, -1, 1, 1, 1, -1},
  { 1, 1, 1, 1, -1, -1, 1, 1},
  { 1, 1, 1, 1, -1, 1, -1, 1},
  { 1, 1, 1, 1, -1, 1, 1, -1},
  { 1, 1, 1, 1, 1, -1, -1, 1},
  { 1, 1, 1, 1, 1, -1, 1, -1},
  { 1, 1, 1, 1, 1, 1, -1, -1},
  { 2, 2, 0, 0, 0, 0, 0, 0},
  { 2, -2, 0, 0, 0, 0, 0, 0},
  { 2, 0, 2, 0, 0, 0, 0, 0},
  { 2, 0, -2, 0, 0, 0, 0, 0},
  { 2, 0, 0, 2, 0, 0, 0, 0},
  { 2, 0, 0, -2, 0, 0, 0, 0},
  { 2, 0, 0, 0, 2, 0, 0, 0},
  { 2, 0, 0, 0, -2, 0, 0, 0},
  { 2, 0, 0, 0, 0, 2, 0, 0},
  { 2, 0, 0, 0, 0, -2, 0, 0},
  { 2, 0, 0, 0, 0, 0, 2, 0},
  { 2, 0, 0, 0, 0, 0, -2, 0},
  { 2, 0, 0, 0, 0, 0, 0, 2},
  { 2, 0, 0, 0, 0, 0, 0, -2},
  { 0, 2, 2, 0, 0, 0, 0, 0},
  { 0, 2, -2, 0, 0, 0, 0, 0},
  { 0, 2, 0, 2, 0, 0, 0, 0},
  { 0, 2, 0, -2, 0, 0, 0, 0},
  { 0, 2, 0, 0, 2, 0, 0, 0},
  { 0, 2, 0, 0, -2, 0, 0, 0},
  { 0, 2, 0, 0, 0, 2, 0, 0},
  { 0, 2, 0, 0, 0, -2, 0, 0},
  { 0, 2, 0, 0, 0, 0, 2, 0},
  { 0, 2, 0, 0, 0, 0, -2, 0},
  { 0, 2, 0, 0, 0, 0, 0, 2},
  { 0, 2, 0, 0, 0, 0, 0, -2},
  { 0, 0, 2, 2, 0, 0, 0, 0},
  { 0, 0, 2, -2, 0, 0, 0, 0},
  { 0, 0, 2, 0, 2, 0, 0, 0},
  { 0, 0, 2, 0, -2, 0, 0, 0},
  { 0, 0, 2, 0, 0, 2, 0, 0},
  { 0, 0, 2, 0, 0, -2, 0, 0},
  { 0, 0, 2, 0, 0, 0, 2, 0},
  { 0, 0, 2, 0, 0, 0, -2, 0},
  { 0, 0, 2, 0, 0, 0, 0, 2},
  { 0, 0, 2, 0, 0, 0, 0, -2},
  { 0, 0, 0, 2, 2, 0, 0, 0},
  { 0, 0, 0, 2, -2, 0, 0, 0},
  { 0, 0, 0, 2, 0, 2, 0, 0},
  { 0, 0, 0, 2, 0, -2, 0, 0},
  { 0, 0, 0, 2, 0, 0, 2, 0},
  { 0, 0, 0, 2, 0, 0, -2, 0},
  { 0, 0, 0, 2, 0, 0, 0, 2},
  { 0, 0, 0, 2, 0, 0, 0, -2},
  { 0, 0, 0, 0, 2, 2, 0, 0},
  { 0, 0, 0, 0, 2, -2, 0, 0},
  { 0, 0, 0, 0, 2, 0, 2, 0},
  { 0, 0, 0, 0, 2, 0, -2, 0},
  { 0, 0, 0, 0, 2, 0, 0, 2},
  { 0, 0, 0, 0, 2, 0, 0, -2},
  { 0, 0, 0, 0, 0, 2, 2, 0},
  { 0, 0, 0, 0, 0, 2, -2, 0},
  { 0, 0, 0, 0, 0, 2, 0, 2},
  { 0, 0, 0, 0, 0, 2, 0, -2},
  { 0, 0, 0, 0, 0, 0, 2, 2},
  { 0, 0, 0, 0, 0, 0, 2, -2}
};
#elif 9==DIM
const int SIZE_DENSE_BASE = 136;
extern const Coordinate<9, IdxType> DENSE_BASE[];
// dense packing base vectors in 9D (L9)
const Coordinate<9, IdxType> DENSE_BASE[SIZE_DENSE_BASE] = {
  { 1, 1, 1, 1, 1, 1, 1, 1, 0},
  { 1, 1, 1, 1, -1, -1, -1, -1, 0},
  { 1, 1, 1, -1, 1, -1, -1, -1, 0},
  { 1, 1, 1, -1, -1, 1, -1, -1, 0},
  { 1, 1, 1, -1, -1, -1, 1, -1, 0},
  { 1, 1, 1, -1, -1, -1, -1, 1, 0},
  { 1, 1, -1, 1, 1, -1, -1, -1, 0},
  { 1, 1, -1, 1, -1, 1, -1, -1, 0},
  { 1, 1, -1, 1, -1, -1, 1, -1, 0},
  { 1, 1, -1, 1, -1, -1, -1, 1, 0},
  { 1, 1, -1, -1, 1, 1, -1, -1, 0},
  { 1, 1, -1, -1, 1, -1, 1, -1, 0},
  { 1, 1, -1, -1, 1, -1, -1, 1, 0},
  { 1, 1, -1, -1, -1, 1, 1, -1, 0},
  { 1, 1, -1, -1, -1, 1, -1, 1, 0},
  { 1, 1, -1, -1, -1, -1, 1, 1, 0},
  { 1, -1, 1, 1, 1, -1, -1, -1, 0},
  { 1, -1, 1, 1, -1, 1, -1, -1, 0},
  { 1, -1, 1, 1, -1, -1, 1, -1, 0},
  { 1, -1, 1, 1, -1, -1, -1, 1, 0},
  { 1, -1, 1, -1, 1, 1, -1, -1, 0},
  { 1, -1, 1, -1, 1, -1, 1, -1, 0},
  { 1, -1, 1, -1, 1, -1, -1, 1, 0},
  { 1, -1, 1, -1, -1, 1, 1, -1, 0},
  { 1, -1, 1, -1, -1, 1, -1, 1, 0},
  { 1, -1, 1, -1, -1, -1, 1, 1, 0},
  { 1, -1, -1, 1, 1, 1, -1, -1, 0},
  { 1, -1, -1, 1, 1, -1, 1, -1, 0},
  { 1, -1, -1, 1, 1, -1, -1, 1, 0},
  { 1, -1, -1, 1, -1, 1, 1, -1, 0},
  { 1, -1, -1, 1, -1, 1, -1, 1, 0},
  { 1, -1, -1, 1, -1, -1, 1, 1, 0},
  { 1, -1, -1, -1, 1, 1, 1, -1, 0},
  { 1, -1, -1, -1, 1, 1, -1, 1, 0},
  { 1, -1, -1, -1, 1, -1, 1, 1, 0},
  { 1, -1, -1, -1, -1, 1, 1, 1, 0},
  { 1, 1, -1, -1, -1, -1, -1, -1, 0},
  { 1, -1, 1, -1, -1, -1, -1, -1, 0},
  { 1, -1, -1, 1, -1, -1, -1, -1, 0},
  { 1, -1, -1, -1, 1, -1, -1, -1, 0},
  { 1, -1, -1, -1, -1, 1, -1, -1, 0},
  { 1, -1, -1, -1, -1, -1, 1, -1, 0},
  { 1, -1, -1, -1, -1, -1, -1, 1, 0},
  { 1, -1, -1, 1, 1, 1, 1, 1, 0},
  { 1, -1, 1, -1, 1, 1, 1, 1, 0},
  { 1, -1, 1, 1, -1, 1, 1, 1, 0},
  { 1, -1, 1, 1, 1, -1, 1, 1, 0},
  { 1, -1, 1, 1, 1, 1, -1, 1, 0},
  { 1, -1, 1, 1, 1, 1, 1, -1, 0},
  { 1, 1, -1, -1, 1, 1, 1, 1, 0},
  { 1, 1, -1, 1, -1, 1, 1, 1, 0},
  { 1, 1, -1, 1, 1, -1, 1, 1, 0},
  { 1, 1, -1, 1, 1, 1, -1, 1, 0},
  { 1, 1, -1, 1, 1, 1, 1, -1, 0},
  { 1, 1, 1, -1, -1, 1, 1, 1, 0},
  { 1, 1, 1, -1, 1, -1, 1, 1, 0},
  { 1, 1, 1, -1, 1, 1, -1, 1, 0},
  { 1, 1, 1, -1, 1, 1, 1, -1, 0},
  { 1, 1, 1, 1, -1, -1, 1, 1, 0},
  { 1, 1, 1, 1, -1, 1, -1, 1, 0},
  { 1, 1, 1, 1, -1, 1, 1, -1, 0},
  { 1, 1, 1, 1, 1, -1, -1, 1, 0},
  { 1, 1, 1, 1, 1, -1, 1, -1, 0},
  { 1, 1, 1, 1, 1, 1, -1, -1, 0},
  { 2, 2, 0, 0, 0, 0, 0, 0, 0},
  { 2, -2, 0, 0, 0, 0, 0, 0, 0},
  { 2, 0, 2, 0, 0, 0, 0, 0, 0},
  { 2, 0, -2, 0, 0, 0, 0, 0, 0},
  { 2, 0, 0, 2, 0, 0, 0, 0, 0},
  { 2, 0, 0, -2, 0, 0, 0, 0, 0},
  { 2, 0, 0, 0, 2, 0, 0, 0, 0},
  { 2, 0, 0, 0, -2, 0, 0, 0, 0},
  { 2, 0, 0, 0, 0, 2, 0, 0, 0},
  { 2, 0, 0, 0, 0, -2, 0, 0, 0},
  { 2, 0, 0, 0, 0, 0, 2, 0, 0},
  { 2, 0, 0, 0, 0, 0, -2, 0, 0},
  { 2, 0, 0, 0, 0, 0, 0, 2, 0},
  { 2, 0, 0, 0, 0, 0, 0, -2, 0},
  { 2, 0, 0, 0, 0, 0, 0, 0, 2},
  { 2, 0, 0, 0, 0, 0, 0, 0, -2},
  { 0, 2, 2, 0, 0, 0, 0, 0, 0},
  { 0, 2, -2, 0, 0, 0, 0, 0, 0},
  { 0, 2, 0, 2, 0, 0, 0, 0, 0},
  { 0, 2, 0, -2, 0, 0, 0, 0, 0},
  { 0, 2, 0, 0, 2, 0, 0, 0, 0},
  { 0, 2, 0, 0, -2, 0, 0, 0, 0},
  { 0, 2, 0, 0, 0, 2, 0, 0, 0},
  { 0, 2, 0, 0, 0, -2, 0, 0, 0},
  { 0, 2, 0, 0, 0, 0, 2, 0, 0},
  { 0, 2, 0, 0, 0, 0, -2, 0, 0},
  { 0, 2, 0, 0, 0, 0, 0, 2, 0},
  { 0, 2, 0, 0, 0, 0, 0, -2, 0},
  { 0, 2, 0, 0, 0, 0, 0, 0, 2},
  { 0, 2, 0, 0, 0, 0, 0, 0, -2},
  { 0, 0, 2, 2, 0, 0, 0, 0, 0},
  { 0, 0, 2, -2, 0, 0, 0, 0, 0},
  { 0, 0, 2, 0, 2, 0, 0, 0, 0},
  { 0, 0, 2, 0, -2, 0, 0, 0, 0},
  { 0, 0, 2, 0, 0, 2, 0, 0, 0},
  { 0, 0, 2, 0, 0, -2, 0, 0, 0},
  { 0, 0, 2, 0, 0, 0, 2, 0, 0},
  { 0, 0, 2, 0, 0, 0, -2, 0, 0},
  { 0, 0, 2, 0, 0, 0, 0, 2, 0},
  { 0, 0, 2, 0, 0, 0, 0, -2, 0},
  { 0, 0, 2, 0, 0, 0, 0, 0, 2},
  { 0, 0, 2, 0, 0, 0, 0, 0, -2},
  { 0, 0, 0, 2, 2, 0, 0, 0, 0},
  { 0, 0, 0, 2, -2, 0, 0, 0, 0},
  { 0, 0, 0, 2, 0, 2, 0, 0, 0},
  { 0, 0, 0, 2, 0, -2, 0, 0, 0},
  { 0, 0, 0, 2, 0, 0, 2, 0, 0},
  { 0, 0, 0, 2, 0, 0, -2, 0, 0},
  { 0, 0, 0, 2, 0, 0, 0, 2, 0},
  { 0, 0, 0, 2, 0, 0, 0, -2, 0},
  { 0, 0, 0, 2, 0, 0, 0, 0, 2},
  { 0, 0, 0, 2, 0, 0, 0, 0, -2},
  { 0, 0, 0, 0, 2, 2, 0, 0, 0},
  { 0, 0, 0, 0, 2, -2, 0, 0, 0},
  { 0, 0, 0, 0, 2, 0, 2, 0, 0},
  { 0, 0, 0, 0, 2, 0, -2, 0, 0},
  { 0, 0, 0, 0, 2, 0, 0, 2, 0},
  { 0, 0, 0, 0, 2, 0, 0, -2, 0},
  { 0, 0, 0, 0, 2, 0, 0, 0, 2},
  { 0, 0, 0, 0, 2, 0, 0, 0, -2},
  { 0, 0, 0, 0, 0, 2, 2, 0, 0},
  { 0, 0, 0, 0, 0, 2, -2, 0, 0},
  { 0, 0, 0, 0, 0, 2, 0, 2, 0},
  { 0, 0, 0, 0, 0, 2, 0, -2, 0},
  { 0, 0, 0, 0, 0, 2, 0, 0, 2},
  { 0, 0, 0, 0, 0, 2, 0, 0, -2},
  { 0, 0, 0, 0, 0, 0, 2, 2, 0},
  { 0, 0, 0, 0, 0, 0, 2, -2, 0},
  { 0, 0, 0, 0, 0, 0, 2, 0, 2},
  { 0, 0, 0, 0, 0, 0, 2, 0, -2},
  { 0, 0, 0, 0, 0, 0, 0, 2, 2},
  { 0, 0, 0, 0, 0, 0, 0, 2, -2}
};
#elif 24==DIM
const int SIZE_DENSE_BASE = 98280;
extern const Coordinate<DIM, IdxType> DENSE_BASE[];
const Coordinate<DIM, IdxType> DENSE_BASE[1]; // not used
#else
const int SIZE_DENSE_BASE = 1;
extern const Coordinate<DIM, IdxType> DENSE_BASE[];
const Coordinate<DIM, IdxType> DENSE_BASE[SIZE_DENSE_BASE];
#endif
