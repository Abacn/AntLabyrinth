//
//  basevec.cpp
//  InvadePercolation
//  Base vectors for dense packings
//
//  Created by Yi Hu on 12/22/20.
//

#include "leathsitenode.hpp"

extern const int size_densebase;

#if 6==DIM
const int size_densebase = 36;
extern const Coordinate<8, IdxType> densebase[];
// dense packing base vectors in 6D (E6)
const Coordinate<8, IdxType> densebase[size_densebase] = {
  { 1, 1, 1, 1, -1, -1, -1, -1},
  { 1, 1, 1, -1, 1, -1, -1, -1},
  { 1, 1, 1, -1, -1, 1, -1, -1},
  { 1, 1, 1, -1, -1, -1, 1, -1},
  { 1, 1, -1, 1, 1, -1, -1, -1},
  { 1, 1, -1, 1, -1, 1, -1, -1},
  { 1, 1, -1, 1, -1, -1, 1, -1},
  { 1, 1, -1, -1, 1, 1, -1, -1},
  { 1, 1, -1, -1, 1, -1, 1, -1},
  { 1, 1, -1, -1, -1, 1, 1, -1},
  { 1, -1, 1, 1, 1, -1, -1, -1},
  { 1, -1, 1, 1, -1, 1, -1, -1},
  { 1, -1, 1, 1, -1, -1, 1, -1},
  { 1, -1, 1, -1, 1, 1, -1, -1},
  { 1, -1, 1, -1, 1, -1, 1, -1},
  { 1, -1, 1, -1, -1, 1, 1, -1},
  { 1, -1, -1, 1, 1, 1, -1, -1},
  { 1, -1, -1, 1, 1, -1, 1, -1},
  { 1, -1, -1, 1, -1, 1, 1, -1},
  { 1, -1, -1, -1, 1, 1, 1, -1},
  { 2, 0, 0, 0, 0, 0, 0, -2},
  { 0, 2, -2, 0, 0, 0, 0, 0},
  { 0, 2, 0, -2, 0, 0, 0, 0},
  { 0, 2, 0, 0, -2, 0, 0, 0},
  { 0, 2, 0, 0, 0, -2, 0, 0},
  { 0, 2, 0, 0, 0, 0, -2, 0},
  { 0, 0, 2, -2, 0, 0, 0, 0},
  { 0, 0, 2, 0, -2, 0, 0, 0},
  { 0, 0, 2, 0, 0, -2, 0, 0},
  { 0, 0, 2, 0, 0, 0, -2, 0},
  { 0, 0, 0, 2, -2, 0, 0, 0},
  { 0, 0, 0, 2, 0, -2, 0, 0},
  { 0, 0, 0, 2, 0, 0, -2, 0},
  { 0, 0, 0, 0, 2, -2, 0, 0},
  { 0, 0, 0, 0, 2, 0, -2, 0},
  { 0, 0, 0, 0, 0, 2, -2, 0}
};
#elif 7==DIM
const int size_densebase = 63;
extern const Coordinate<8, IdxType> densebase[];
// dense packing base vectors in 7D (E7)
const Coordinate<8, IdxType> densebase[size_densebase] = {
  { 1, 1, 1, 1, -1, -1, -1, -1},
  { 1, 1, 1, -1, 1, -1, -1, -1},
  { 1, 1, 1, -1, -1, 1, -1, -1},
  { 1, 1, 1, -1, -1, -1, 1, -1},
  { 1, 1, 1, -1, -1, -1, -1, 1},
  { 1, 1, -1, 1, 1, -1, -1, -1},
  { 1, 1, -1, 1, -1, 1, -1, -1},
  { 1, 1, -1, 1, -1, -1, 1, -1},
  { 1, 1, -1, 1, -1, -1, -1, 1},
  { 1, 1, -1, -1, 1, 1, -1, -1},
  { 1, 1, -1, -1, 1, -1, 1, -1},
  { 1, 1, -1, -1, 1, -1, -1, 1},
  { 1, 1, -1, -1, -1, 1, 1, -1},
  { 1, 1, -1, -1, -1, 1, -1, 1},
  { 1, 1, -1, -1, -1, -1, 1, 1},
  { 1, -1, 1, 1, 1, -1, -1, -1},
  { 1, -1, 1, 1, -1, 1, -1, -1},
  { 1, -1, 1, 1, -1, -1, 1, -1},
  { 1, -1, 1, 1, -1, -1, -1, 1},
  { 1, -1, 1, -1, 1, 1, -1, -1},
  { 1, -1, 1, -1, 1, -1, 1, -1},
  { 1, -1, 1, -1, 1, -1, -1, 1},
  { 1, -1, 1, -1, -1, 1, 1, -1},
  { 1, -1, 1, -1, -1, 1, -1, 1},
  { 1, -1, 1, -1, -1, -1, 1, 1},
  { 1, -1, -1, 1, 1, 1, -1, -1},
  { 1, -1, -1, 1, 1, -1, 1, -1},
  { 1, -1, -1, 1, 1, -1, -1, 1},
  { 1, -1, -1, 1, -1, 1, 1, -1},
  { 1, -1, -1, 1, -1, 1, -1, 1},
  { 1, -1, -1, 1, -1, -1, 1, 1},
  { 1, -1, -1, -1, 1, 1, 1, -1},
  { 1, -1, -1, -1, 1, 1, -1, 1},
  { 1, -1, -1, -1, 1, -1, 1, 1},
  { 1, -1, -1, -1, -1, 1, 1, 1},
  { 2, -2, 0, 0, 0, 0, 0, 0},
  { 2, 0, -2, 0, 0, 0, 0, 0},
  { 2, 0, 0, -2, 0, 0, 0, 0},
  { 2, 0, 0, 0, -2, 0, 0, 0},
  { 2, 0, 0, 0, 0, -2, 0, 0},
  { 2, 0, 0, 0, 0, 0, -2, 0},
  { 2, 0, 0, 0, 0, 0, 0, -2},
  { 0, 2, -2, 0, 0, 0, 0, 0},
  { 0, 2, 0, -2, 0, 0, 0, 0},
  { 0, 2, 0, 0, -2, 0, 0, 0},
  { 0, 2, 0, 0, 0, -2, 0, 0},
  { 0, 2, 0, 0, 0, 0, -2, 0},
  { 0, 2, 0, 0, 0, 0, 0, -2},
  { 0, 0, 2, -2, 0, 0, 0, 0},
  { 0, 0, 2, 0, -2, 0, 0, 0},
  { 0, 0, 2, 0, 0, -2, 0, 0},
  { 0, 0, 2, 0, 0, 0, -2, 0},
  { 0, 0, 2, 0, 0, 0, 0, -2},
  { 0, 0, 0, 2, -2, 0, 0, 0},
  { 0, 0, 0, 2, 0, -2, 0, 0},
  { 0, 0, 0, 2, 0, 0, -2, 0},
  { 0, 0, 0, 2, 0, 0, 0, -2},
  { 0, 0, 0, 0, 2, -2, 0, 0},
  { 0, 0, 0, 0, 2, 0, -2, 0},
  { 0, 0, 0, 0, 2, 0, 0, -2},
  { 0, 0, 0, 0, 0, 2, -2, 0},
  { 0, 0, 0, 0, 0, 2, 0, -2},
  { 0, 0, 0, 0, 0, 0, 2, -2}
};
#elif 8==DIM
const int size_densebase = 120;
extern const Coordinate<8, IdxType> densebase[];
// dense packing base vectors in 8D (E8)
const Coordinate<8, IdxType> densebase[size_densebase] = {
  { 1, 1, 1, 1, 1, 1, 1, 1},
  { 1, 1, 1, 1, -1, -1, -1, -1},
  { 1, 1, 1, -1, 1, -1, -1, -1},
  { 1, 1, 1, -1, -1, 1, -1, -1},
  { 1, 1, 1, -1, -1, -1, 1, -1},
  { 1, 1, 1, -1, -1, -1, -1, 1},
  { 1, 1, -1, 1, 1, -1, -1, -1},
  { 1, 1, -1, 1, -1, 1, -1, -1},
  { 1, 1, -1, 1, -1, -1, 1, -1},
  { 1, 1, -1, 1, -1, -1, -1, 1},
  { 1, 1, -1, -1, 1, 1, -1, -1},
  { 1, 1, -1, -1, 1, -1, 1, -1},
  { 1, 1, -1, -1, 1, -1, -1, 1},
  { 1, 1, -1, -1, -1, 1, 1, -1},
  { 1, 1, -1, -1, -1, 1, -1, 1},
  { 1, 1, -1, -1, -1, -1, 1, 1},
  { 1, -1, 1, 1, 1, -1, -1, -1},
  { 1, -1, 1, 1, -1, 1, -1, -1},
  { 1, -1, 1, 1, -1, -1, 1, -1},
  { 1, -1, 1, 1, -1, -1, -1, 1},
  { 1, -1, 1, -1, 1, 1, -1, -1},
  { 1, -1, 1, -1, 1, -1, 1, -1},
  { 1, -1, 1, -1, 1, -1, -1, 1},
  { 1, -1, 1, -1, -1, 1, 1, -1},
  { 1, -1, 1, -1, -1, 1, -1, 1},
  { 1, -1, 1, -1, -1, -1, 1, 1},
  { 1, -1, -1, 1, 1, 1, -1, -1},
  { 1, -1, -1, 1, 1, -1, 1, -1},
  { 1, -1, -1, 1, 1, -1, -1, 1},
  { 1, -1, -1, 1, -1, 1, 1, -1},
  { 1, -1, -1, 1, -1, 1, -1, 1},
  { 1, -1, -1, 1, -1, -1, 1, 1},
  { 1, -1, -1, -1, 1, 1, 1, -1},
  { 1, -1, -1, -1, 1, 1, -1, 1},
  { 1, -1, -1, -1, 1, -1, 1, 1},
  { 1, -1, -1, -1, -1, 1, 1, 1},
  { 1, 1, -1, -1, -1, -1, -1, -1},
  { 1, -1, 1, -1, -1, -1, -1, -1},
  { 1, -1, -1, 1, -1, -1, -1, -1},
  { 1, -1, -1, -1, 1, -1, -1, -1},
  { 1, -1, -1, -1, -1, 1, -1, -1},
  { 1, -1, -1, -1, -1, -1, 1, -1},
  { 1, -1, -1, -1, -1, -1, -1, 1},
  { 1, -1, -1, 1, 1, 1, 1, 1},
  { 1, -1, 1, -1, 1, 1, 1, 1},
  { 1, -1, 1, 1, -1, 1, 1, 1},
  { 1, -1, 1, 1, 1, -1, 1, 1},
  { 1, -1, 1, 1, 1, 1, -1, 1},
  { 1, -1, 1, 1, 1, 1, 1, -1},
  { 1, 1, -1, -1, 1, 1, 1, 1},
  { 1, 1, -1, 1, -1, 1, 1, 1},
  { 1, 1, -1, 1, 1, -1, 1, 1},
  { 1, 1, -1, 1, 1, 1, -1, 1},
  { 1, 1, -1, 1, 1, 1, 1, -1},
  { 1, 1, 1, -1, -1, 1, 1, 1},
  { 1, 1, 1, -1, 1, -1, 1, 1},
  { 1, 1, 1, -1, 1, 1, -1, 1},
  { 1, 1, 1, -1, 1, 1, 1, -1},
  { 1, 1, 1, 1, -1, -1, 1, 1},
  { 1, 1, 1, 1, -1, 1, -1, 1},
  { 1, 1, 1, 1, -1, 1, 1, -1},
  { 1, 1, 1, 1, 1, -1, -1, 1},
  { 1, 1, 1, 1, 1, -1, 1, -1},
  { 1, 1, 1, 1, 1, 1, -1, -1},
  { 2, 2, 0, 0, 0, 0, 0, 0},
  { 2, -2, 0, 0, 0, 0, 0, 0},
  { 2, 0, 2, 0, 0, 0, 0, 0},
  { 2, 0, -2, 0, 0, 0, 0, 0},
  { 2, 0, 0, 2, 0, 0, 0, 0},
  { 2, 0, 0, -2, 0, 0, 0, 0},
  { 2, 0, 0, 0, 2, 0, 0, 0},
  { 2, 0, 0, 0, -2, 0, 0, 0},
  { 2, 0, 0, 0, 0, 2, 0, 0},
  { 2, 0, 0, 0, 0, -2, 0, 0},
  { 2, 0, 0, 0, 0, 0, 2, 0},
  { 2, 0, 0, 0, 0, 0, -2, 0},
  { 2, 0, 0, 0, 0, 0, 0, 2},
  { 2, 0, 0, 0, 0, 0, 0, -2},
  { 0, 2, 2, 0, 0, 0, 0, 0},
  { 0, 2, -2, 0, 0, 0, 0, 0},
  { 0, 2, 0, 2, 0, 0, 0, 0},
  { 0, 2, 0, -2, 0, 0, 0, 0},
  { 0, 2, 0, 0, 2, 0, 0, 0},
  { 0, 2, 0, 0, -2, 0, 0, 0},
  { 0, 2, 0, 0, 0, 2, 0, 0},
  { 0, 2, 0, 0, 0, -2, 0, 0},
  { 0, 2, 0, 0, 0, 0, 2, 0},
  { 0, 2, 0, 0, 0, 0, -2, 0},
  { 0, 2, 0, 0, 0, 0, 0, 2},
  { 0, 2, 0, 0, 0, 0, 0, -2},
  { 0, 0, 2, 2, 0, 0, 0, 0},
  { 0, 0, 2, -2, 0, 0, 0, 0},
  { 0, 0, 2, 0, 2, 0, 0, 0},
  { 0, 0, 2, 0, -2, 0, 0, 0},
  { 0, 0, 2, 0, 0, 2, 0, 0},
  { 0, 0, 2, 0, 0, -2, 0, 0},
  { 0, 0, 2, 0, 0, 0, 2, 0},
  { 0, 0, 2, 0, 0, 0, -2, 0},
  { 0, 0, 2, 0, 0, 0, 0, 2},
  { 0, 0, 2, 0, 0, 0, 0, -2},
  { 0, 0, 0, 2, 2, 0, 0, 0},
  { 0, 0, 0, 2, -2, 0, 0, 0},
  { 0, 0, 0, 2, 0, 2, 0, 0},
  { 0, 0, 0, 2, 0, -2, 0, 0},
  { 0, 0, 0, 2, 0, 0, 2, 0},
  { 0, 0, 0, 2, 0, 0, -2, 0},
  { 0, 0, 0, 2, 0, 0, 0, 2},
  { 0, 0, 0, 2, 0, 0, 0, -2},
  { 0, 0, 0, 0, 2, 2, 0, 0},
  { 0, 0, 0, 0, 2, -2, 0, 0},
  { 0, 0, 0, 0, 2, 0, 2, 0},
  { 0, 0, 0, 0, 2, 0, -2, 0},
  { 0, 0, 0, 0, 2, 0, 0, 2},
  { 0, 0, 0, 0, 2, 0, 0, -2},
  { 0, 0, 0, 0, 0, 2, 2, 0},
  { 0, 0, 0, 0, 0, 2, -2, 0},
  { 0, 0, 0, 0, 0, 2, 0, 2},
  { 0, 0, 0, 0, 0, 2, 0, -2},
  { 0, 0, 0, 0, 0, 0, 2, 2},
  { 0, 0, 0, 0, 0, 0, 2, -2}
};
#elif 9==DIM
const int size_densebase = 136;
extern const Coordinate<9, IdxType> densebase[];
// dense packing base vectors in 9D (L9)
const Coordinate<9, IdxType> densebase[size_densebase] = {
  { 1, 1, 1, 1, 1, 1, 1, 1, 0},
  { 1, 1, 1, 1, -1, -1, -1, -1, 0},
  { 1, 1, 1, -1, 1, -1, -1, -1, 0},
  { 1, 1, 1, -1, -1, 1, -1, -1, 0},
  { 1, 1, 1, -1, -1, -1, 1, -1, 0},
  { 1, 1, 1, -1, -1, -1, -1, 1, 0},
  { 1, 1, -1, 1, 1, -1, -1, -1, 0},
  { 1, 1, -1, 1, -1, 1, -1, -1, 0},
  { 1, 1, -1, 1, -1, -1, 1, -1, 0},
  { 1, 1, -1, 1, -1, -1, -1, 1, 0},
  { 1, 1, -1, -1, 1, 1, -1, -1, 0},
  { 1, 1, -1, -1, 1, -1, 1, -1, 0},
  { 1, 1, -1, -1, 1, -1, -1, 1, 0},
  { 1, 1, -1, -1, -1, 1, 1, -1, 0},
  { 1, 1, -1, -1, -1, 1, -1, 1, 0},
  { 1, 1, -1, -1, -1, -1, 1, 1, 0},
  { 1, -1, 1, 1, 1, -1, -1, -1, 0},
  { 1, -1, 1, 1, -1, 1, -1, -1, 0},
  { 1, -1, 1, 1, -1, -1, 1, -1, 0},
  { 1, -1, 1, 1, -1, -1, -1, 1, 0},
  { 1, -1, 1, -1, 1, 1, -1, -1, 0},
  { 1, -1, 1, -1, 1, -1, 1, -1, 0},
  { 1, -1, 1, -1, 1, -1, -1, 1, 0},
  { 1, -1, 1, -1, -1, 1, 1, -1, 0},
  { 1, -1, 1, -1, -1, 1, -1, 1, 0},
  { 1, -1, 1, -1, -1, -1, 1, 1, 0},
  { 1, -1, -1, 1, 1, 1, -1, -1, 0},
  { 1, -1, -1, 1, 1, -1, 1, -1, 0},
  { 1, -1, -1, 1, 1, -1, -1, 1, 0},
  { 1, -1, -1, 1, -1, 1, 1, -1, 0},
  { 1, -1, -1, 1, -1, 1, -1, 1, 0},
  { 1, -1, -1, 1, -1, -1, 1, 1, 0},
  { 1, -1, -1, -1, 1, 1, 1, -1, 0},
  { 1, -1, -1, -1, 1, 1, -1, 1, 0},
  { 1, -1, -1, -1, 1, -1, 1, 1, 0},
  { 1, -1, -1, -1, -1, 1, 1, 1, 0},
  { 1, 1, -1, -1, -1, -1, -1, -1, 0},
  { 1, -1, 1, -1, -1, -1, -1, -1, 0},
  { 1, -1, -1, 1, -1, -1, -1, -1, 0},
  { 1, -1, -1, -1, 1, -1, -1, -1, 0},
  { 1, -1, -1, -1, -1, 1, -1, -1, 0},
  { 1, -1, -1, -1, -1, -1, 1, -1, 0},
  { 1, -1, -1, -1, -1, -1, -1, 1, 0},
  { 1, -1, -1, 1, 1, 1, 1, 1, 0},
  { 1, -1, 1, -1, 1, 1, 1, 1, 0},
  { 1, -1, 1, 1, -1, 1, 1, 1, 0},
  { 1, -1, 1, 1, 1, -1, 1, 1, 0},
  { 1, -1, 1, 1, 1, 1, -1, 1, 0},
  { 1, -1, 1, 1, 1, 1, 1, -1, 0},
  { 1, 1, -1, -1, 1, 1, 1, 1, 0},
  { 1, 1, -1, 1, -1, 1, 1, 1, 0},
  { 1, 1, -1, 1, 1, -1, 1, 1, 0},
  { 1, 1, -1, 1, 1, 1, -1, 1, 0},
  { 1, 1, -1, 1, 1, 1, 1, -1, 0},
  { 1, 1, 1, -1, -1, 1, 1, 1, 0},
  { 1, 1, 1, -1, 1, -1, 1, 1, 0},
  { 1, 1, 1, -1, 1, 1, -1, 1, 0},
  { 1, 1, 1, -1, 1, 1, 1, -1, 0},
  { 1, 1, 1, 1, -1, -1, 1, 1, 0},
  { 1, 1, 1, 1, -1, 1, -1, 1, 0},
  { 1, 1, 1, 1, -1, 1, 1, -1, 0},
  { 1, 1, 1, 1, 1, -1, -1, 1, 0},
  { 1, 1, 1, 1, 1, -1, 1, -1, 0},
  { 1, 1, 1, 1, 1, 1, -1, -1, 0},
  { 2, 2, 0, 0, 0, 0, 0, 0, 0},
  { 2, -2, 0, 0, 0, 0, 0, 0, 0},
  { 2, 0, 2, 0, 0, 0, 0, 0, 0},
  { 2, 0, -2, 0, 0, 0, 0, 0, 0},
  { 2, 0, 0, 2, 0, 0, 0, 0, 0},
  { 2, 0, 0, -2, 0, 0, 0, 0, 0},
  { 2, 0, 0, 0, 2, 0, 0, 0, 0},
  { 2, 0, 0, 0, -2, 0, 0, 0, 0},
  { 2, 0, 0, 0, 0, 2, 0, 0, 0},
  { 2, 0, 0, 0, 0, -2, 0, 0, 0},
  { 2, 0, 0, 0, 0, 0, 2, 0, 0},
  { 2, 0, 0, 0, 0, 0, -2, 0, 0},
  { 2, 0, 0, 0, 0, 0, 0, 2, 0},
  { 2, 0, 0, 0, 0, 0, 0, -2, 0},
  { 2, 0, 0, 0, 0, 0, 0, 0, 2},
  { 2, 0, 0, 0, 0, 0, 0, 0, -2},
  { 0, 2, 2, 0, 0, 0, 0, 0, 0},
  { 0, 2, -2, 0, 0, 0, 0, 0, 0},
  { 0, 2, 0, 2, 0, 0, 0, 0, 0},
  { 0, 2, 0, -2, 0, 0, 0, 0, 0},
  { 0, 2, 0, 0, 2, 0, 0, 0, 0},
  { 0, 2, 0, 0, -2, 0, 0, 0, 0},
  { 0, 2, 0, 0, 0, 2, 0, 0, 0},
  { 0, 2, 0, 0, 0, -2, 0, 0, 0},
  { 0, 2, 0, 0, 0, 0, 2, 0, 0},
  { 0, 2, 0, 0, 0, 0, -2, 0, 0},
  { 0, 2, 0, 0, 0, 0, 0, 2, 0},
  { 0, 2, 0, 0, 0, 0, 0, -2, 0},
  { 0, 2, 0, 0, 0, 0, 0, 0, 2},
  { 0, 2, 0, 0, 0, 0, 0, 0, -2},
  { 0, 0, 2, 2, 0, 0, 0, 0, 0},
  { 0, 0, 2, -2, 0, 0, 0, 0, 0},
  { 0, 0, 2, 0, 2, 0, 0, 0, 0},
  { 0, 0, 2, 0, -2, 0, 0, 0, 0},
  { 0, 0, 2, 0, 0, 2, 0, 0, 0},
  { 0, 0, 2, 0, 0, -2, 0, 0, 0},
  { 0, 0, 2, 0, 0, 0, 2, 0, 0},
  { 0, 0, 2, 0, 0, 0, -2, 0, 0},
  { 0, 0, 2, 0, 0, 0, 0, 2, 0},
  { 0, 0, 2, 0, 0, 0, 0, -2, 0},
  { 0, 0, 2, 0, 0, 0, 0, 0, 2},
  { 0, 0, 2, 0, 0, 0, 0, 0, -2},
  { 0, 0, 0, 2, 2, 0, 0, 0, 0},
  { 0, 0, 0, 2, -2, 0, 0, 0, 0},
  { 0, 0, 0, 2, 0, 2, 0, 0, 0},
  { 0, 0, 0, 2, 0, -2, 0, 0, 0},
  { 0, 0, 0, 2, 0, 0, 2, 0, 0},
  { 0, 0, 0, 2, 0, 0, -2, 0, 0},
  { 0, 0, 0, 2, 0, 0, 0, 2, 0},
  { 0, 0, 0, 2, 0, 0, 0, -2, 0},
  { 0, 0, 0, 2, 0, 0, 0, 0, 2},
  { 0, 0, 0, 2, 0, 0, 0, 0, -2},
  { 0, 0, 0, 0, 2, 2, 0, 0, 0},
  { 0, 0, 0, 0, 2, -2, 0, 0, 0},
  { 0, 0, 0, 0, 2, 0, 2, 0, 0},
  { 0, 0, 0, 0, 2, 0, -2, 0, 0},
  { 0, 0, 0, 0, 2, 0, 0, 2, 0},
  { 0, 0, 0, 0, 2, 0, 0, -2, 0},
  { 0, 0, 0, 0, 2, 0, 0, 0, 2},
  { 0, 0, 0, 0, 2, 0, 0, 0, -2},
  { 0, 0, 0, 0, 0, 2, 2, 0, 0},
  { 0, 0, 0, 0, 0, 2, -2, 0, 0},
  { 0, 0, 0, 0, 0, 2, 0, 2, 0},
  { 0, 0, 0, 0, 0, 2, 0, -2, 0},
  { 0, 0, 0, 0, 0, 2, 0, 0, 2},
  { 0, 0, 0, 0, 0, 2, 0, 0, -2},
  { 0, 0, 0, 0, 0, 0, 2, 2, 0},
  { 0, 0, 0, 0, 0, 0, 2, -2, 0},
  { 0, 0, 0, 0, 0, 0, 2, 0, 2},
  { 0, 0, 0, 0, 0, 0, 2, 0, -2},
  { 0, 0, 0, 0, 0, 0, 0, 2, 2},
  { 0, 0, 0, 0, 0, 0, 0, 2, -2}
};
#else
const int size_densebase = 1;
extern const Coordinate<DIM, IdxType> densebase[];
const Coordinate<DIM, IdxType> densebase[size_densebase] = { {0} };
#endif
